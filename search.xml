<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>课堂笔记22-10-19（Python语言程序设计)</title>
      <link href="/post/fa4c7a49.html"/>
      <url>/post/fa4c7a49.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-Random函数-随机模块"><a href="#一-Random函数-随机模块" class="headerlink" title="一.Random函数  随机模块"></a>一.Random函数  随机模块</h2><ol><li><p>函数名 描述   “import random as R”</p><ol><li><p>R.randint(a,b) 返回一个随机的整数(包含a,也包含b)</p><ol><li><p>&#96;&#96;&#96;python<br>import random        #例子</p><p>print(‘第一次’, random.randint(1, 10))</p><p>print(‘第二次’, random.randint(1, 10))</p><p>print(‘第三次’, random.randint(1, 10))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. R.random() 返回一个[0, 1) 之间的随机实数</span><br><span class="line"></span><br><span class="line">   1. ```python</span><br><span class="line">      import random         #例子</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      print(&#x27;第一次&#x27;, random.random())</span><br><span class="line">      </span><br><span class="line">      print(&#x27;第二次&#x27;, random.random())</span><br><span class="line">      </span><br><span class="line">      print(&#x27;第三次&#x27;, random.random())</span><br></pre></td></tr></table></figure></li></ol></li><li><p>R.uniform(a,b) 返回[a,b) 区间内的随机实数</p><ol><li><p>&#96;&#96;&#96;python<br>import random         #例子</p><p>print(‘第一次’, random.uniform(1, 6))</p><p>print(‘第二次’, random.uniform(1, 6))</p><p>print(‘第三次’, random.uniform(1, 6))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. R.randrange([start,] stop[, step]) 返回range(start,stop,step)中的随机数（包括开头，不包括结尾）</span><br><span class="line"></span><br><span class="line">   1. ```python</span><br><span class="line">      import random         #例子</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      print(random.randrange(0, 100, 3))</span><br><span class="line">      </span><br><span class="line">      print(random.randrange(5, 55, 5))</span><br><span class="line">      </span><br><span class="line">      print(random.choice(range(6, 48, 3)))</span><br></pre></td></tr></table></figure></li></ol></li><li><p>R.choice(seq) 从序列中返回随意元素</p><ol><li><pre><code class="python">import random        #例子print(&#39;第一次&#39;, random.choice([1, &#39;a&#39;, 3.14, True, None]))print(&#39;第二次&#39;, random.choice([1, &#39;a&#39;, 3.14, True, None]))print(&#39;第三次&#39;, random.choice([1, &#39;a&#39;, 3.14, True, None]))print(&#39;第四次&#39;, random.choice(&#39;abcdefg&#39;))<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   6. R.shuffle(seq[, random]) 随机指定序列的顺序(乱序序列）</span><br><span class="line"></span><br><span class="line">   7. R.sample(seq,n) 从序列中选择n个随机且不重复的元素</span><br><span class="line"></span><br><span class="line">   8. R.getrandbits(nbit) 以长整型的形式返回用nbit位来表示的随机数</span><br><span class="line"></span><br><span class="line">   9. R.seed(a=None) 用给定的数a设置随机种子,不给参数a则用当前时间设置随机种子</span><br><span class="line"></span><br><span class="line">2. 课堂练习</span><br><span class="line"></span><br><span class="line">   1. 随机生成六位数字验证码</span><br><span class="line"></span><br><span class="line">      1. ```python</span><br><span class="line">         import random       #例子</span><br><span class="line">         </span><br><span class="line">         s = &#x27;&#x27;  #创建字符串变量，存储生成验证码</span><br><span class="line">         for i in range(6):</span><br><span class="line">             num = random.randint(0,9)</span><br><span class="line">             s += str(num)</span><br><span class="line">         print(s)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;python<br>import random         #例子</p><p>s &#x3D; ‘’    #创建字符串变量，存储生成验证码<br>for i in range(6):<br>num &#x3D; random.choice(‘0123456789’)<br>s +&#x3D; num<br>print(s)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 随机生成六位验证码包括字母数字</span><br><span class="line"></span><br><span class="line">   1. ```python</span><br><span class="line">      import Random         #例子</span><br><span class="line">      </span><br><span class="line">      s = &#x27;&#x27;     #创建字符串变量，存储生成验证码</span><br><span class="line">      for i in range(6):</span><br><span class="line">          num = random.choice(&#x27;0123456789zxcvbnmasdfghjklqwertyuiopZXCVBNMASDFGHJKLQWERTYUIOP&#x27;)</span><br><span class="line">          s += num</span><br><span class="line">      print(s)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Math-数学模块"><a href="#Math-数学模块" class="headerlink" title="Math 数学模块"></a>Math 数学模块</h2><ol><li><p>不需要导入math数学函数的数学函数</p><ol><li><p>abs():返回一个数的绝对值</p><ol><li><p>&#96;&#96;&#96;python<br>x &#x3D; abs(-7.25)     #例子</p><p>print(x)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. max()/min():最大数/最小数</span><br><span class="line"></span><br><span class="line">   1. ```python</span><br><span class="line">      x = min(5, 10, 25)     #例子</span><br><span class="line">      y = max(5, 10, 25)</span><br><span class="line">      </span><br><span class="line">      print(x)</span><br><span class="line">      print(y)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>pow(): 幂运算</p><ol><li><p>&#96;&#96;&#96;python<br>x &#x3D; pow(4, 3)     #例子</p><p>print(x)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   4. round():四舍五入</span><br><span class="line"></span><br><span class="line">   5. divmod():获取商和余数</span><br><span class="line"></span><br><span class="line">   6. sun():求和</span><br><span class="line"></span><br><span class="line">2. Math模块</span><br><span class="line"></span><br><span class="line">   1. ceil(x)/floor(y):向上向下取整</span><br><span class="line"></span><br><span class="line">      1. ```python</span><br><span class="line">         import  math     #例子</span><br><span class="line">         a = 3.14</span><br><span class="line">         math.ceil(a)</span><br><span class="line">         </span><br><span class="line">         math.floor(a)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>comb(n,k):组合运算</p></li><li><p>degrees(x)&#x2F;radians(y):角度转换：(弧度 - 度)&#x2F;(度 - 弧度)</p></li><li><p>exp(x)&#x2F;pow(x,y):e的x次幂&#x2F;x的y次幂</p></li><li><p>fabs(x):返回x的绝对值</p></li><li><p>gcd(*integers):返回最大公约数</p></li><li><p>isclose()&#x2F;isfinite(x)&#x2F;isinf(x)&#x2F;isnan(x):两个值是否接近&#x2F;两个值是否无穷大或NaN&#x2F;两个值是否无穷大&#x2F;两个值是否NaN&lt;非数字&gt;</p></li><li><p>log(x[,base]):返回x以base为底的对数</p></li><li><p>log2(x)&#x2F;log10(x):返回x以2&#x2F;以10为底的对数，比log()更精确</p></li><li><p>madf(x)&#x2F;trunc(x):返回x的小数和整数部分，两个结果都是带有x的符号并且是浮点数&#x2F;返回x的整数部分</p></li><li><p>sqrt(x):返回x的平方根</p></li><li><p>(略)：各种(反)三角函数&#x2F;双曲函数</p></li><li><p>pi&#x2F;e&#x2F;tau:圆周率常熟π&#x2F;自然常熟&#x2F;常熟r-2π</p></li><li><p>inf&#x2F;nan:浮点正无穷大&lt;对于无穷大,使用 -math.inf&gt;&#x2F;浮点“非数字”（NaN)值</p></li><li><p>copysign(x,y):返回一个基于x的绝对值和y的符号的浮点数</p></li></ol></li></ol><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><ol><li><p><img src="https://picgo-pu-1307892539.cos.ap-chengdu.myqcloud.com/10-19-001.png"></p></li><li><p><img src="https://picgo-pu-1307892539.cos.ap-chengdu.myqcloud.com/10-19-002.png"></p></li></ol><h4 id="注：课堂案例代码没有全部有例子（主要是太累了，请私下自己琢磨吧），课后作业答案会编写到下一节Python课课堂笔记后！！！"><a href="#注：课堂案例代码没有全部有例子（主要是太累了，请私下自己琢磨吧），课后作业答案会编写到下一节Python课课堂笔记后！！！" class="headerlink" title="注：课堂案例代码没有全部有例子（主要是太累了，请私下自己琢磨吧），课后作业答案会编写到下一节Python课课堂笔记后！！！"></a>注：课堂案例代码没有全部有例子（主要是太累了，请私下自己琢磨吧），课后作业答案会编写到下一节Python课课堂笔记后！！！</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 成都东软学院（CNU） </tag>
            
            <tag> 上课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上课笔记22-10-18(Java面向对象程序设计)</title>
      <link href="/post/18c18e70.html"/>
      <url>/post/18c18e70.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-JAVA基础"><a href="#一-JAVA基础" class="headerlink" title="一. JAVA基础"></a>一. JAVA基础</h2><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="二-面向对象的特征"><a href="#二-面向对象的特征" class="headerlink" title="二.面向对象的特征"></a>二.面向对象的特征</h2><ol><li>面向过程就是分析出解决问题所需要的步骤，然后用函数吧这个步骤一一实现，使用的时候依次调用就可以了。</li><li>面向对象是吧构成问题的事物按照一定规划分为多个独立的对象，然后通过调用对象的方法来解决问题。<ol><li>如果出现问题只需要修改个别的对象就可以了</li></ol></li><li>SP和OOP对比<ol><li><img src="https://picgo-pu-1307892539.cos.ap-chengdu.myqcloud.com/image-20221018161848267.png"></li></ol></li><li>面向对象的特征主要可以概括为封装、继承、多态<ol><li>封装<ol><li>是面向对象的核心思想，将对象的属性和行为封装起来，不需要让外界知道具体的实现细节，就是封装思想</li></ol></li><li>继承<ol><li>主要描述的是类与类之间的关系，通过继承，可以在无需要新编写原有类的情况下，对原有类的功能进行扩展。他是多态实现的前提</li></ol></li><li>多态<ol><li>指的是不同的类进行同一操作可以有不同的行为。即在一个类中定义的属性和方法被其它类继承后，它们可以具有不同的数据类型或表现出不同的行为，这使得同一个属性和方法在不同的类中具有不同的语义。</li></ol></li></ol></li><li>00程序的标准<ol><li>易复用</li><li>易扩展</li><li>易维护</li></ol></li></ol><h2 id="二-一类与对象的概念"><a href="#二-一类与对象的概念" class="headerlink" title="二.一类与对象的概念"></a>二.一类与对象的概念</h2><ol><li><p>类</p><ol><li>一组具有相同数据结构和相同操作对象的模板。是现实世界中所有相同性质的对象的抽象，为同类对象规范通用的状态和行为</li></ol></li><li><p>对象：</p><ol><li>类的具体表现形式。是满足类规范的具体实例，是真正执行功能的主体。</li></ol></li><li><p>类与对象的关系</p><ol><li>抽象与具体</li></ol></li><li><p>在面向对象的思想中最核心的就是对象，为了在程序中创建对象，首先需要定义一个类，用于描述一组对象的共同特征和行为。</p></li><li><p>类中可以定义成员变量(成员数据）和成员方法(成员函数),其中成员变量用于描述对象的特征，也被称作属性，成员方法用于描述对象的行为，可简称为方法。</p></li><li><p><img src="https://picgo-pu-1307892539.cos.ap-chengdu.myqcloud.com/10.18.002.png" alt="类举例"></p></li><li><p>类的定义</p><ol><li><p><img src="https://picgo-pu-1307892539.cos.ap-chengdu.myqcloud.com/image-20221018165550001.png"></p></li><li><p>定义类的基本结构</p><ol><li><p>权限修饰符 class 类名 [extends 父类名 | implements 接口类 ]</p><ol><li>权限修饰符:为public或者缺省。public用来声明该类为公有类,可以被别的对象访问。定义为公有的类存储的文件名为类名。</li><li>类名:用户自定义的标识符，用来标志这个类的引用。</li></ol></li><li><p>定义成员变量</p><ol><li>有public、 private、 protected和默认权限四种<ol><li>public:公共权限，可以被所有类访问</li><li>private：私有权限，只允许在类定义自身范围内使用，若从外部访问，必须通过构造方法间接进行访问</li><li>protected:受保护权限，可以被类本身、其子类访问，或者被与类定义同在一个包中的其他类访问</li><li>默认权限:也称package访问限，无修饰符，可以被类自身或类同包的其他类访问</li></ol></li><li>数据类型:包括基本类型以及用户自定义的扩展类型</li></ol></li><li><p>特定修饰符</p><ol><li>static:静态的，所有对象共享的类成员。</li><li>final:表示常量，不能修改。</li><li>transient:表示暂时性变量，与对象的序列化技术相关。</li><li>volatile:表示不稳定的，与多线程并发控制相关。</li></ol></li></ol></li></ol></li></ol><h3 id="上个课数据线摔坏了，干！！！谢谢我的女朋友送我一个充电头（我有原装数据线，摔坏的是USB接口的线！！！）么么！！"><a href="#上个课数据线摔坏了，干！！！谢谢我的女朋友送我一个充电头（我有原装数据线，摔坏的是USB接口的线！！！）么么！！" class="headerlink" title="上个课数据线摔坏了，干！！！谢谢我的女朋友送我一个充电头（我有原装数据线，摔坏的是USB接口的线！！！）么么！！"></a>上个课数据线摔坏了，干！！！谢谢我的女朋友送我一个充电头（我有原装数据线，摔坏的是USB接口的线！！！）么么！！</h3><p><img src="https://picgo-pu-1307892539.cos.ap-chengdu.myqcloud.com/%E5%AE%9D%E8%B4%9D001.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 成都东软学院（CNU） </tag>
            
            <tag> 上课笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
